{
	"name": "Ingest Historical Weather VIA REST DYNAMICALLY PROGRAMMED",
	"properties": {
		"activities": [
			{
				"name": "Web1",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"url": "https://joshyipkeyvault.vault.azure.net/secrets/OpenWeatherAPIKey?api-version=7.0",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "ForEach2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@variables('dateRangesVar2')",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Copy data1_copy1",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings",
										"copyBehavior": "FlattenHierarchy"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "HistoricalWeatherRESTDataset",
									"type": "DatasetReference",
									"parameters": {
										"lat": 42.3601,
										"lon": -71.0589,
										"start": {
											"value": "@item().start",
											"type": "Expression"
										},
										"end": {
											"value": "@item().end",
											"type": "Expression"
										},
										"appid": "@activity('Web1').output.value",
										"dataType": "hour"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "HistoricalWeatherRawDataset_to_ADLS",
									"type": "DatasetReference"
								}
							]
						}
					]
				}
			},
			{
				"name": "ForEach2",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Web1",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@range(0, 2)",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "temp set variable",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "dateRangesVariable",
								"value": [
									"{{\"start\": 1691452800",
									" \"end\": 1692057600}}"
								]
							}
						},
						{
							"name": "Append variable1",
							"type": "AppendVariable",
							"dependsOn": [
								{
									"activity": "temp set variable",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "dateRangesVar2",
								"value": {
									"value": "@variables('dateRangesVariable')",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"startDate": {
				"type": "string"
			},
			"endDate": {
				"type": "string"
			}
		},
		"variables": {
			"dateRangesVariable": {
				"type": "Array",
				"defaultValue": []
			},
			"dateRangesVar2": {
				"type": "Array"
			}
		},
		"annotations": []
	}
}